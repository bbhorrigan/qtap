// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qpoint-io/qtap/pkg/process (interfaces: Receiver)
//
// Generated by this command:
//
//	mockgen -destination ./mocks/receiver.go -package mocks . Receiver
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	process "github.com/qpoint-io/qtap/pkg/process"
	gomock "go.uber.org/mock/gomock"
)

// MockReceiver is a mock of Receiver interface.
type MockReceiver struct {
	ctrl     *gomock.Controller
	recorder *MockReceiverMockRecorder
	isgomock struct{}
}

// MockReceiverMockRecorder is the mock recorder for MockReceiver.
type MockReceiverMockRecorder struct {
	mock *MockReceiver
}

// NewMockReceiver creates a new mock instance.
func NewMockReceiver(ctrl *gomock.Controller) *MockReceiver {
	mock := &MockReceiver{ctrl: ctrl}
	mock.recorder = &MockReceiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceiver) EXPECT() *MockReceiverMockRecorder {
	return m.recorder
}

// RegisterProcess mocks base method.
func (m *MockReceiver) RegisterProcess(p *process.Process) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterProcess", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterProcess indicates an expected call of RegisterProcess.
func (mr *MockReceiverMockRecorder) RegisterProcess(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterProcess", reflect.TypeOf((*MockReceiver)(nil).RegisterProcess), p)
}

// UnregisterProcess mocks base method.
func (m *MockReceiver) UnregisterProcess(pid int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterProcess", pid)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterProcess indicates an expected call of UnregisterProcess.
func (mr *MockReceiverMockRecorder) UnregisterProcess(pid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterProcess", reflect.TypeOf((*MockReceiver)(nil).UnregisterProcess), pid)
}
