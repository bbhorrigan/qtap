// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qpoint-io/qtap/pkg/process (interfaces: Eventer)
//
// Generated by this command:
//
//	mockgen -destination ./mocks/eventer.go -package mocks . Eventer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	process "github.com/qpoint-io/qtap/pkg/process"
	gomock "go.uber.org/mock/gomock"
)

// MockEventer is a mock of Eventer interface.
type MockEventer struct {
	ctrl     *gomock.Controller
	recorder *MockEventerMockRecorder
	isgomock struct{}
}

// MockEventerMockRecorder is the mock recorder for MockEventer.
type MockEventerMockRecorder struct {
	mock *MockEventer
}

// NewMockEventer creates a new mock instance.
func NewMockEventer(ctrl *gomock.Controller) *MockEventer {
	mock := &MockEventer{ctrl: ctrl}
	mock.recorder = &MockEventerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventer) EXPECT() *MockEventerMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockEventer) Register(arg0 process.Receiver) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", arg0)
}

// Register indicates an expected call of Register.
func (mr *MockEventerMockRecorder) Register(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockEventer)(nil).Register), arg0)
}

// SetMeta mocks base method.
func (m *MockEventer) SetMeta(p *process.Process) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMeta", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMeta indicates an expected call of SetMeta.
func (mr *MockEventerMockRecorder) SetMeta(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMeta", reflect.TypeOf((*MockEventer)(nil).SetMeta), p)
}

// Start mocks base method.
func (m *MockEventer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockEventerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockEventer)(nil).Start))
}

// Stop mocks base method.
func (m *MockEventer) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockEventerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockEventer)(nil).Stop))
}
