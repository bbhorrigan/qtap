// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package tap

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type TapAddrArgs struct{ Addr uint64 }

type TapAddrPortKey struct {
	Addr [4]uint32
	Port uint16
	_    [2]byte
}

type TapCloseArgs struct{ Fd int32 }

type TapConnInfo struct {
	ConnPidId struct {
		Pid      uint32
		Tgid     uint32
		Fd       int32
		Function uint32
		Tsid     uint64
	}
	Cookie uint64
	Addr   struct {
		SaFamily uint16
		Addr     [16]uint8
		Port     uint16
	}
	_        [4]byte
	WrBytes  int64
	RdBytes  int64
	IsOpen   bool
	IsSsl    bool
	_        [2]byte
	Protocol uint32
	Ignore   bool
	_        [7]byte
}

type TapDataArgs struct {
	Fd      int32
	_       [4]byte
	Buf     uint64
	Iovcnt  int32
	_       [4]byte
	Ssl     uint64
	ExBytes uint64
}

type TapFdRequest struct {
	Fd    uint32
	IsSsl bool
	_     [3]byte
}

type TapMgmtAddrs struct {
	Ipv4 uint32
	Ipv6 [4]uint32
	Port uint32
}

type TapPidFdKey struct {
	Pid uint32
	Fd  int32
}

type TapProcessMeta struct {
	RootId         uint64
	QpointStrategy uint32
	Filter         uint8
	TlsOk          bool
	ContainerId    [13]int8
	Pad            [3]int8
	_              [2]byte
}

type TapSOCKET_SETTINGS uint32

const (
	TapSOCKET_SETTINGSSOCK_SETTING_IGNORE_LOOPBACK TapSOCKET_SETTINGS = 0
	TapSOCKET_SETTINGSSOCK_SETTING_DIRECTION       TapSOCKET_SETTINGS = 1
	TapSOCKET_SETTINGSSOCK_SETTING_STREAM_HTTP     TapSOCKET_SETTINGS = 2
)

type TapSocketDataEvent struct {
	Type uint64
	Attr struct {
		TimestampNs uint64
		ConnPidId   struct {
			Pid      uint32
			Tgid     uint32
			Fd       int32
			Function uint32
			Tsid     uint64
		}
		Cookie    uint64
		Direction uint32
		MsgSize   uint32
		Pos       uint64
		Pid       uint32
		Tgid      uint32
	}
	Msg [30720]int8
}

type TapSocketHostnameEvent struct {
	Type uint64
	Attr struct {
		TimestampNs uint64
		ConnPidId   struct {
			Pid      uint32
			Tgid     uint32
			Fd       int32
			Function uint32
			Tsid     uint64
		}
		Cookie      uint64
		HostnameLen uint8
		_           [7]byte
	}
	Hostname [255]int8
	_        [1]byte
}

type TapSocketOpKey struct {
	PidTgid  uint64
	FuncName uint32
	_        [4]byte
}

type TapSocketSettingValue struct {
	IgnoreLoopback bool
	_              [3]byte
}

type TapSocketTlsClientHelloEvent struct {
	Type uint64
	Attr struct {
		Cookie uint64
		Size   uint32
		_      [4]byte
	}
	Data [16384]uint8
}

// LoadTap returns the embedded CollectionSpec for Tap.
func LoadTap() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TapBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Tap: %w", err)
	}

	return spec, err
}

// LoadTapObjects loads Tap and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*TapObjects
//	*TapPrograms
//	*TapMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadTapObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadTap()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// TapSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TapSpecs struct {
	TapProgramSpecs
	TapMapSpecs
}

// TapSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TapProgramSpecs struct {
	CleanupPidFdFileEntries      *ebpf.ProgramSpec `ebpf:"cleanup_pid_fd_file_entries"`
	OpensslProbeEntrySSL_read    *ebpf.ProgramSpec `ebpf:"openssl__probe_entry_SSL_read"`
	OpensslProbeEntrySSL_readEx  *ebpf.ProgramSpec `ebpf:"openssl__probe_entry_SSL_read_ex"`
	OpensslProbeEntrySSL_write   *ebpf.ProgramSpec `ebpf:"openssl__probe_entry_SSL_write"`
	OpensslProbeEntrySSL_writeEx *ebpf.ProgramSpec `ebpf:"openssl__probe_entry_SSL_write_ex"`
	OpensslProbeRetSSL_read      *ebpf.ProgramSpec `ebpf:"openssl__probe_ret_SSL_read"`
	OpensslProbeRetSSL_readEx    *ebpf.ProgramSpec `ebpf:"openssl__probe_ret_SSL_read_ex"`
	OpensslProbeRetSSL_write     *ebpf.ProgramSpec `ebpf:"openssl__probe_ret_SSL_write"`
	OpensslProbeRetSSL_writeEx   *ebpf.ProgramSpec `ebpf:"openssl__probe_ret_SSL_write_ex"`
	OpensslProbeEntrySSL_free    *ebpf.ProgramSpec `ebpf:"openssl_probe_entry_SSL_free"`
	OpensslProbeRetSSL_new       *ebpf.ProgramSpec `ebpf:"openssl_probe_ret_SSL_new"`
	SyscallProbeEntryAccept      *ebpf.ProgramSpec `ebpf:"syscall__probe_entry_accept"`
	SyscallProbeEntryAccept4     *ebpf.ProgramSpec `ebpf:"syscall__probe_entry_accept4"`
	SyscallProbeEntryClose       *ebpf.ProgramSpec `ebpf:"syscall__probe_entry_close"`
	SyscallProbeEntryConnect     *ebpf.ProgramSpec `ebpf:"syscall__probe_entry_connect"`
	SyscallProbeEntryExecve      *ebpf.ProgramSpec `ebpf:"syscall__probe_entry_execve"`
	SyscallProbeEntryExecveat    *ebpf.ProgramSpec `ebpf:"syscall__probe_entry_execveat"`
	SyscallProbeEntryRead        *ebpf.ProgramSpec `ebpf:"syscall__probe_entry_read"`
	SyscallProbeEntryReadv       *ebpf.ProgramSpec `ebpf:"syscall__probe_entry_readv"`
	SyscallProbeEntryRecvfrom    *ebpf.ProgramSpec `ebpf:"syscall__probe_entry_recvfrom"`
	SyscallProbeEntrySendto      *ebpf.ProgramSpec `ebpf:"syscall__probe_entry_sendto"`
	SyscallProbeEntrySocket      *ebpf.ProgramSpec `ebpf:"syscall__probe_entry_socket"`
	SyscallProbeEntryWrite       *ebpf.ProgramSpec `ebpf:"syscall__probe_entry_write"`
	SyscallProbeEntryWritev      *ebpf.ProgramSpec `ebpf:"syscall__probe_entry_writev"`
	SyscallProbeRetAccept        *ebpf.ProgramSpec `ebpf:"syscall__probe_ret_accept"`
	SyscallProbeRetAccept4       *ebpf.ProgramSpec `ebpf:"syscall__probe_ret_accept4"`
	SyscallProbeRetClose         *ebpf.ProgramSpec `ebpf:"syscall__probe_ret_close"`
	SyscallProbeRetConnect       *ebpf.ProgramSpec `ebpf:"syscall__probe_ret_connect"`
	SyscallProbeRetExecve        *ebpf.ProgramSpec `ebpf:"syscall__probe_ret_execve"`
	SyscallProbeRetExecveat      *ebpf.ProgramSpec `ebpf:"syscall__probe_ret_execveat"`
	SyscallProbeRetRead          *ebpf.ProgramSpec `ebpf:"syscall__probe_ret_read"`
	SyscallProbeRetReadInit      *ebpf.ProgramSpec `ebpf:"syscall__probe_ret_read_init"`
	SyscallProbeRetReadv         *ebpf.ProgramSpec `ebpf:"syscall__probe_ret_readv"`
	SyscallProbeRetReadvInit     *ebpf.ProgramSpec `ebpf:"syscall__probe_ret_readv_init"`
	SyscallProbeRetRecvfrom      *ebpf.ProgramSpec `ebpf:"syscall__probe_ret_recvfrom"`
	SyscallProbeRetRecvfromInit  *ebpf.ProgramSpec `ebpf:"syscall__probe_ret_recvfrom_init"`
	SyscallProbeRetSendto        *ebpf.ProgramSpec `ebpf:"syscall__probe_ret_sendto"`
	SyscallProbeRetSendtoInit    *ebpf.ProgramSpec `ebpf:"syscall__probe_ret_sendto_init"`
	SyscallProbeRetSocket        *ebpf.ProgramSpec `ebpf:"syscall__probe_ret_socket"`
	SyscallProbeRetWrite         *ebpf.ProgramSpec `ebpf:"syscall__probe_ret_write"`
	SyscallProbeRetWriteInit     *ebpf.ProgramSpec `ebpf:"syscall__probe_ret_write_init"`
	SyscallProbeRetWritev        *ebpf.ProgramSpec `ebpf:"syscall__probe_ret_writev"`
	SyscallProbeRetWritevInit    *ebpf.ProgramSpec `ebpf:"syscall__probe_ret_writev_init"`
	TraceTcpClose                *ebpf.ProgramSpec `ebpf:"trace_tcp_close"`
	TraceTcpV4ConnectFexit       *ebpf.ProgramSpec `ebpf:"trace_tcp_v4_connect_fexit"`
	TraceTcpV6ConnectFexit       *ebpf.ProgramSpec `ebpf:"trace_tcp_v6_connect_fexit"`
	TracepointSchedProcessExit   *ebpf.ProgramSpec `ebpf:"tracepoint__sched__process_exit"`
	TrackFdInstallEntry          *ebpf.ProgramSpec `ebpf:"track_fd_install_entry"`
	TrackSockAllocFileEntry      *ebpf.ProgramSpec `ebpf:"track_sock_alloc_file_entry"`
	TrackSockAllocFileRet        *ebpf.ProgramSpec `ebpf:"track_sock_alloc_file_ret"`
}

// TapMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TapMapSpecs struct {
	ActiveAddrArgsMap             *ebpf.MapSpec `ebpf:"active_addr_args_map"`
	ActiveCloseArgsMap            *ebpf.MapSpec `ebpf:"active_close_args_map"`
	ActiveFdArgsMap               *ebpf.MapSpec `ebpf:"active_fd_args_map"`
	ActiveFileToPidFdMap          *ebpf.MapSpec `ebpf:"active_file_to_pid_fd_map"`
	ActiveFileToSockMap           *ebpf.MapSpec `ebpf:"active_file_to_sock_map"`
	ActiveReadArgsMap             *ebpf.MapSpec `ebpf:"active_read_args_map"`
	ActiveSockAllocFileArgs       *ebpf.MapSpec `ebpf:"active_sock_alloc_file_args"`
	ActiveSocketArgsMap           *ebpf.MapSpec `ebpf:"active_socket_args_map"`
	ActiveSocketTypes             *ebpf.MapSpec `ebpf:"active_socket_types"`
	ActiveSslReadArgsMap          *ebpf.MapSpec `ebpf:"active_ssl_read_args_map"`
	ActiveSslWriteArgsMap         *ebpf.MapSpec `ebpf:"active_ssl_write_args_map"`
	ActiveTcpSourceAddrMap        *ebpf.MapSpec `ebpf:"active_tcp_source_addr_map"`
	ActiveWriteArgsMap            *ebpf.MapSpec `ebpf:"active_write_args_map"`
	AddrPortToPidMap              *ebpf.MapSpec `ebpf:"addr_port_to_pid_map"`
	ConnInfoMap                   *ebpf.MapSpec `ebpf:"conn_info_map"`
	MgmtAddrs                     *ebpf.MapSpec `ebpf:"mgmt_addrs"`
	PidFdToSockMap                *ebpf.MapSpec `ebpf:"pid_fd_to_sock_map"`
	ProcEvents                    *ebpf.MapSpec `ebpf:"proc_events"`
	ProcessMetaMap                *ebpf.MapSpec `ebpf:"process_meta_map"`
	SocketDataEventBufferHeap     *ebpf.MapSpec `ebpf:"socket_data_event_buffer_heap"`
	SocketEvents                  *ebpf.MapSpec `ebpf:"socket_events"`
	SocketHostnameEventHeap       *ebpf.MapSpec `ebpf:"socket_hostname_event_heap"`
	SocketSettingsMap             *ebpf.MapSpec `ebpf:"socket_settings_map"`
	SocketTlsClientHelloEventHeap *ebpf.MapSpec `ebpf:"socket_tls_client_hello_event_heap"`
	TraceEvents                   *ebpf.MapSpec `ebpf:"trace_events"`
	TraceToggleMap                *ebpf.MapSpec `ebpf:"trace_toggle_map"`
	UprobeFdRequests              *ebpf.MapSpec `ebpf:"uprobe_fd_requests"`
}

// TapObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadTapObjects or ebpf.CollectionSpec.LoadAndAssign.
type TapObjects struct {
	TapPrograms
	TapMaps
}

func (o *TapObjects) Close() error {
	return _TapClose(
		&o.TapPrograms,
		&o.TapMaps,
	)
}

// TapMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadTapObjects or ebpf.CollectionSpec.LoadAndAssign.
type TapMaps struct {
	ActiveAddrArgsMap             *ebpf.Map `ebpf:"active_addr_args_map"`
	ActiveCloseArgsMap            *ebpf.Map `ebpf:"active_close_args_map"`
	ActiveFdArgsMap               *ebpf.Map `ebpf:"active_fd_args_map"`
	ActiveFileToPidFdMap          *ebpf.Map `ebpf:"active_file_to_pid_fd_map"`
	ActiveFileToSockMap           *ebpf.Map `ebpf:"active_file_to_sock_map"`
	ActiveReadArgsMap             *ebpf.Map `ebpf:"active_read_args_map"`
	ActiveSockAllocFileArgs       *ebpf.Map `ebpf:"active_sock_alloc_file_args"`
	ActiveSocketArgsMap           *ebpf.Map `ebpf:"active_socket_args_map"`
	ActiveSocketTypes             *ebpf.Map `ebpf:"active_socket_types"`
	ActiveSslReadArgsMap          *ebpf.Map `ebpf:"active_ssl_read_args_map"`
	ActiveSslWriteArgsMap         *ebpf.Map `ebpf:"active_ssl_write_args_map"`
	ActiveTcpSourceAddrMap        *ebpf.Map `ebpf:"active_tcp_source_addr_map"`
	ActiveWriteArgsMap            *ebpf.Map `ebpf:"active_write_args_map"`
	AddrPortToPidMap              *ebpf.Map `ebpf:"addr_port_to_pid_map"`
	ConnInfoMap                   *ebpf.Map `ebpf:"conn_info_map"`
	MgmtAddrs                     *ebpf.Map `ebpf:"mgmt_addrs"`
	PidFdToSockMap                *ebpf.Map `ebpf:"pid_fd_to_sock_map"`
	ProcEvents                    *ebpf.Map `ebpf:"proc_events"`
	ProcessMetaMap                *ebpf.Map `ebpf:"process_meta_map"`
	SocketDataEventBufferHeap     *ebpf.Map `ebpf:"socket_data_event_buffer_heap"`
	SocketEvents                  *ebpf.Map `ebpf:"socket_events"`
	SocketHostnameEventHeap       *ebpf.Map `ebpf:"socket_hostname_event_heap"`
	SocketSettingsMap             *ebpf.Map `ebpf:"socket_settings_map"`
	SocketTlsClientHelloEventHeap *ebpf.Map `ebpf:"socket_tls_client_hello_event_heap"`
	TraceEvents                   *ebpf.Map `ebpf:"trace_events"`
	TraceToggleMap                *ebpf.Map `ebpf:"trace_toggle_map"`
	UprobeFdRequests              *ebpf.Map `ebpf:"uprobe_fd_requests"`
}

func (m *TapMaps) Close() error {
	return _TapClose(
		m.ActiveAddrArgsMap,
		m.ActiveCloseArgsMap,
		m.ActiveFdArgsMap,
		m.ActiveFileToPidFdMap,
		m.ActiveFileToSockMap,
		m.ActiveReadArgsMap,
		m.ActiveSockAllocFileArgs,
		m.ActiveSocketArgsMap,
		m.ActiveSocketTypes,
		m.ActiveSslReadArgsMap,
		m.ActiveSslWriteArgsMap,
		m.ActiveTcpSourceAddrMap,
		m.ActiveWriteArgsMap,
		m.AddrPortToPidMap,
		m.ConnInfoMap,
		m.MgmtAddrs,
		m.PidFdToSockMap,
		m.ProcEvents,
		m.ProcessMetaMap,
		m.SocketDataEventBufferHeap,
		m.SocketEvents,
		m.SocketHostnameEventHeap,
		m.SocketSettingsMap,
		m.SocketTlsClientHelloEventHeap,
		m.TraceEvents,
		m.TraceToggleMap,
		m.UprobeFdRequests,
	)
}

// TapPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadTapObjects or ebpf.CollectionSpec.LoadAndAssign.
type TapPrograms struct {
	CleanupPidFdFileEntries      *ebpf.Program `ebpf:"cleanup_pid_fd_file_entries"`
	OpensslProbeEntrySSL_read    *ebpf.Program `ebpf:"openssl__probe_entry_SSL_read"`
	OpensslProbeEntrySSL_readEx  *ebpf.Program `ebpf:"openssl__probe_entry_SSL_read_ex"`
	OpensslProbeEntrySSL_write   *ebpf.Program `ebpf:"openssl__probe_entry_SSL_write"`
	OpensslProbeEntrySSL_writeEx *ebpf.Program `ebpf:"openssl__probe_entry_SSL_write_ex"`
	OpensslProbeRetSSL_read      *ebpf.Program `ebpf:"openssl__probe_ret_SSL_read"`
	OpensslProbeRetSSL_readEx    *ebpf.Program `ebpf:"openssl__probe_ret_SSL_read_ex"`
	OpensslProbeRetSSL_write     *ebpf.Program `ebpf:"openssl__probe_ret_SSL_write"`
	OpensslProbeRetSSL_writeEx   *ebpf.Program `ebpf:"openssl__probe_ret_SSL_write_ex"`
	OpensslProbeEntrySSL_free    *ebpf.Program `ebpf:"openssl_probe_entry_SSL_free"`
	OpensslProbeRetSSL_new       *ebpf.Program `ebpf:"openssl_probe_ret_SSL_new"`
	SyscallProbeEntryAccept      *ebpf.Program `ebpf:"syscall__probe_entry_accept"`
	SyscallProbeEntryAccept4     *ebpf.Program `ebpf:"syscall__probe_entry_accept4"`
	SyscallProbeEntryClose       *ebpf.Program `ebpf:"syscall__probe_entry_close"`
	SyscallProbeEntryConnect     *ebpf.Program `ebpf:"syscall__probe_entry_connect"`
	SyscallProbeEntryExecve      *ebpf.Program `ebpf:"syscall__probe_entry_execve"`
	SyscallProbeEntryExecveat    *ebpf.Program `ebpf:"syscall__probe_entry_execveat"`
	SyscallProbeEntryRead        *ebpf.Program `ebpf:"syscall__probe_entry_read"`
	SyscallProbeEntryReadv       *ebpf.Program `ebpf:"syscall__probe_entry_readv"`
	SyscallProbeEntryRecvfrom    *ebpf.Program `ebpf:"syscall__probe_entry_recvfrom"`
	SyscallProbeEntrySendto      *ebpf.Program `ebpf:"syscall__probe_entry_sendto"`
	SyscallProbeEntrySocket      *ebpf.Program `ebpf:"syscall__probe_entry_socket"`
	SyscallProbeEntryWrite       *ebpf.Program `ebpf:"syscall__probe_entry_write"`
	SyscallProbeEntryWritev      *ebpf.Program `ebpf:"syscall__probe_entry_writev"`
	SyscallProbeRetAccept        *ebpf.Program `ebpf:"syscall__probe_ret_accept"`
	SyscallProbeRetAccept4       *ebpf.Program `ebpf:"syscall__probe_ret_accept4"`
	SyscallProbeRetClose         *ebpf.Program `ebpf:"syscall__probe_ret_close"`
	SyscallProbeRetConnect       *ebpf.Program `ebpf:"syscall__probe_ret_connect"`
	SyscallProbeRetExecve        *ebpf.Program `ebpf:"syscall__probe_ret_execve"`
	SyscallProbeRetExecveat      *ebpf.Program `ebpf:"syscall__probe_ret_execveat"`
	SyscallProbeRetRead          *ebpf.Program `ebpf:"syscall__probe_ret_read"`
	SyscallProbeRetReadInit      *ebpf.Program `ebpf:"syscall__probe_ret_read_init"`
	SyscallProbeRetReadv         *ebpf.Program `ebpf:"syscall__probe_ret_readv"`
	SyscallProbeRetReadvInit     *ebpf.Program `ebpf:"syscall__probe_ret_readv_init"`
	SyscallProbeRetRecvfrom      *ebpf.Program `ebpf:"syscall__probe_ret_recvfrom"`
	SyscallProbeRetRecvfromInit  *ebpf.Program `ebpf:"syscall__probe_ret_recvfrom_init"`
	SyscallProbeRetSendto        *ebpf.Program `ebpf:"syscall__probe_ret_sendto"`
	SyscallProbeRetSendtoInit    *ebpf.Program `ebpf:"syscall__probe_ret_sendto_init"`
	SyscallProbeRetSocket        *ebpf.Program `ebpf:"syscall__probe_ret_socket"`
	SyscallProbeRetWrite         *ebpf.Program `ebpf:"syscall__probe_ret_write"`
	SyscallProbeRetWriteInit     *ebpf.Program `ebpf:"syscall__probe_ret_write_init"`
	SyscallProbeRetWritev        *ebpf.Program `ebpf:"syscall__probe_ret_writev"`
	SyscallProbeRetWritevInit    *ebpf.Program `ebpf:"syscall__probe_ret_writev_init"`
	TraceTcpClose                *ebpf.Program `ebpf:"trace_tcp_close"`
	TraceTcpV4ConnectFexit       *ebpf.Program `ebpf:"trace_tcp_v4_connect_fexit"`
	TraceTcpV6ConnectFexit       *ebpf.Program `ebpf:"trace_tcp_v6_connect_fexit"`
	TracepointSchedProcessExit   *ebpf.Program `ebpf:"tracepoint__sched__process_exit"`
	TrackFdInstallEntry          *ebpf.Program `ebpf:"track_fd_install_entry"`
	TrackSockAllocFileEntry      *ebpf.Program `ebpf:"track_sock_alloc_file_entry"`
	TrackSockAllocFileRet        *ebpf.Program `ebpf:"track_sock_alloc_file_ret"`
}

func (p *TapPrograms) Close() error {
	return _TapClose(
		p.CleanupPidFdFileEntries,
		p.OpensslProbeEntrySSL_read,
		p.OpensslProbeEntrySSL_readEx,
		p.OpensslProbeEntrySSL_write,
		p.OpensslProbeEntrySSL_writeEx,
		p.OpensslProbeRetSSL_read,
		p.OpensslProbeRetSSL_readEx,
		p.OpensslProbeRetSSL_write,
		p.OpensslProbeRetSSL_writeEx,
		p.OpensslProbeEntrySSL_free,
		p.OpensslProbeRetSSL_new,
		p.SyscallProbeEntryAccept,
		p.SyscallProbeEntryAccept4,
		p.SyscallProbeEntryClose,
		p.SyscallProbeEntryConnect,
		p.SyscallProbeEntryExecve,
		p.SyscallProbeEntryExecveat,
		p.SyscallProbeEntryRead,
		p.SyscallProbeEntryReadv,
		p.SyscallProbeEntryRecvfrom,
		p.SyscallProbeEntrySendto,
		p.SyscallProbeEntrySocket,
		p.SyscallProbeEntryWrite,
		p.SyscallProbeEntryWritev,
		p.SyscallProbeRetAccept,
		p.SyscallProbeRetAccept4,
		p.SyscallProbeRetClose,
		p.SyscallProbeRetConnect,
		p.SyscallProbeRetExecve,
		p.SyscallProbeRetExecveat,
		p.SyscallProbeRetRead,
		p.SyscallProbeRetReadInit,
		p.SyscallProbeRetReadv,
		p.SyscallProbeRetReadvInit,
		p.SyscallProbeRetRecvfrom,
		p.SyscallProbeRetRecvfromInit,
		p.SyscallProbeRetSendto,
		p.SyscallProbeRetSendtoInit,
		p.SyscallProbeRetSocket,
		p.SyscallProbeRetWrite,
		p.SyscallProbeRetWriteInit,
		p.SyscallProbeRetWritev,
		p.SyscallProbeRetWritevInit,
		p.TraceTcpClose,
		p.TraceTcpV4ConnectFexit,
		p.TraceTcpV6ConnectFexit,
		p.TracepointSchedProcessExit,
		p.TrackFdInstallEntry,
		p.TrackSockAllocFileEntry,
		p.TrackSockAllocFileRet,
	)
}

func _TapClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tap_x86_bpfel.o
var _TapBytes []byte
